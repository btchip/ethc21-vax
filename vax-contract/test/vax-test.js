const { expect } = require("chai");
const crypto = require("crypto");

describe("Vax", function () {
  it("Mint a pass", async function () {
    const Vax = await ethers.getContractFactory("Vax");
    const vax = await Vax.deploy();
    await vax.deployed();

    // Invalid issuer signature rejected

    await expect(vax.mint("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", Buffer.from("0110559764ff49e94d49184272b36138092240cd86e24d132e94d59b84d9b5aa1d112f0732e59e7600768dfc35ba744b89f2356cd85bb1acdd96424b9a435dfa548c39bec7cc892cfb584450c958946d1ea0d8ba3560d635f66488e6e0e314e1b1fa420f2bd0a08c6c45165df5a67a8f0f91679e0ff84f7735bb85d794304402201f8f108cc5f74f0c40e5e2cdaafd440c7682b2dd88e878f70a425e517dbd6419022037418d50c0eef2c8a910e215a271dc881e7ad8b2b40f7ca01b74334195c344e00498237755797cff0806e4f2ae86ffb82a701242e49deafdd0519dfabff7bc8080756d334152c0a9daf18bc23ac84d781a16daad2f934b56d2888939d05932e5bf30440220284f83e432522464ff5e11bbdc7801f0955a6660165eb94e15b894055e7ca13402204e8fe58237c10984e8af47de10ca11369fd4681aed8dd97b1dfa70afa5c5afee", "hex"))).to.be.revertedWith("InvalidReceipt()");

    // Invalid code hash rejected

    await expect(vax.mint("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", Buffer.from("0110559764ff49e94d49184272b36138092240cd86e24d132e94d59b84d9b5aa1d112f0732e59e7600768dfc35ba744b89f2356cd85bb1acdd96424b9a435dfa548c39bec7cc892cfb584450c958946d1ea0d8ba3560d635f66488e6e0e314e1b1fa420f2bd0a08c6c45165df5a67a8f0f91679e0ff84f7735bb85d794304402201f8f108cc5f74f0c40e5e2cdaafd440c7682b2dd88e878f70a425e517dbd6419022037418d50c0eef2c8a910e215a271dc881e7ad8b2b40f7ca01b74334195c344e00498237755797cff0806e4f2ae86ffb82a701242e49deafdd0519dfabff7bc8080756d334152c0a9daf18bc23ac84d781a16daad2f934b56d2888939d05932e5bf30440220284f83e432522464db5e11bbdc7801f0955a6660165eb94e15b894055e7ca13402204e8fe58237c10984e8af47de10ca11369fd4681aed8dd97b1dfa70afa5c5afee", "hex"))).to.be.revertedWith("InvalidReceipt()");

    const provTx = await vax.addCodeHash(Buffer.from("e314e1b1fa420f2bd0a08c6c45165df5a67a8f0f91679e0ff84f7735bb85d794", "hex"));
    await provTx.wait();

    // Invalid attestation signature rejected

    await expect(vax.mint("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", Buffer.from("0110559764ff49e94d49184272b36138092240cd86e24d132e94d59b84d9b5aa1d112f0732e59e7600768dfc35ba744b89f2356cd85bb1acdd96424b9a435dfa548c39bec7cc892cfb584450c958946d1ea0d8ba3560d635f66488e6e0e314e1b1fa420f2bd0a08c6c45165df5a67a8f0f91679e0ff84f7735bb85d794304402201fff108cc5f74f0c40e5e2cdaafd440c7682b2dd88e878f70a425e517dbd6419022037418d50c0eef2c8a910e215a271dc881e7ad8b2b40f7ca01b74334195c344e00498237755797cff0806e4f2ae86ffb82a701242e49deafdd0519dfabff7bc8080756d334152c0a9daf18bc23ac84d781a16daad2f934b56d2888939d05932e5bf30440220284f83e432522464db5e11bbdc7801f0955a6660165eb94e15b894055e7ca13402204e8fe58237c10984e8af47de10ca11369fd4681aed8dd97b1dfa70afa5c5afee", "hex"))).to.be.revertedWith("InvalidReceipt()");

    // Valid receipt accepted

    const testTx = await vax.mint("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", Buffer.from("0110559764ff49e94d49184272b36138092240cd86e24d132e94d59b84d9b5aa1d112f0732e59e7600768dfc35ba744b89f2356cd85bb1acdd96424b9a435dfa548c39bec7cc892cfb584450c958946d1ea0d8ba3560d635f66488e6e0e314e1b1fa420f2bd0a08c6c45165df5a67a8f0f91679e0ff84f7735bb85d794304402201f8f108cc5f74f0c40e5e2cdaafd440c7682b2dd88e878f70a425e517dbd6419022037418d50c0eef2c8a910e215a271dc881e7ad8b2b40f7ca01b74334195c344e00498237755797cff0806e4f2ae86ffb82a701242e49deafdd0519dfabff7bc8080756d334152c0a9daf18bc23ac84d781a16daad2f934b56d2888939d05932e5bf30440220284f83e432522464db5e11bbdc7801f0955a6660165eb94e15b894055e7ca13402204e8fe58237c10984e8af47de10ca11369fd4681aed8dd97b1dfa70afa5c5afee", "hex"));
    const rcpt = await testTx.wait();
    tokenId = rcpt.events[0].args[2].toString();
    
    expect(await vax.minter(tokenId)).equal("0x112F0732E59E7600768dFc35Ba744b89F2356Cd8");
    hash = crypto.createHash("sha256");
    hash.update("NICOLAS");
    hash.update("BACCA");
    hash.update("test");
    expect(await vax.saltedIdentity(tokenId)).equal("0x" + hash.digest().toString("hex"));
    expect(await vax.startDate(tokenId)).equal(1624651254);
    expect(await vax.expirationDate(tokenId)).equal(1686693600);

    // Valid receipt with different privacy salt cannot be minted

    await expect(vax.mint("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", Buffer.from("0110559764ff49e94d49184272b36138092240cd86e24d132e94d59b84d9b5aa1d112f0732e59e7600768dfc35ba744b89f2356cd806d0aef284de0da2eed12c7f4c08885289db9e53985b55ac456e5dcca0bdcaa460d635f66488e6e0e314e1b1fa420f2bd0a08c6c45165df5a67a8f0f91679e0ff84f7735bb85d7943044022012f02b0e8a7d567b649072bb991a6a6a454e60b9f6bbcf7b7021e91484746286022068235a4b8df5e3462af072e20180c9710ecd1c6a7f360826fba4b8a51b9fc35f0498237755797cff0806e4f2ae86ffb82a701242e49deafdd0519dfabff7bc8080756d334152c0a9daf18bc23ac84d781a16daad2f934b56d2888939d05932e5bf30440220284f83e432522464db5e11bbdc7801f0955a6660165eb94e15b894055e7ca13402204e8fe58237c10984e8af47de10ca11369fd4681aed8dd97b1dfa70afa5c5afee", "hex"))).to.be.revertedWith("ERC721: token already minted");
  });
});
