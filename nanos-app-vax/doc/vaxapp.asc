Vax demo : Technical Specification 
===================================
Nicolas Bacca <nicolas@ledger.com>
Application version 1.0.0 - 18th of July 2021

## 1.0.0
  - Initial release

## About

This application creates a proof of validation of the vaccination scheme of an european Digital Green Certificate that can be stored as a NFT onchain, providing additional validation and privacy benefits

## APDUs

### PARSE HEALTH CERTIFICATE

#### Description

This command parses a CBOR encoded european DGC and produces a receipt that can be consumed by a smart contract

Only secp256r1 signed DGCs are supported in this demo

#### Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   02   |  00 : initial block of data

                    80 : command continuation |   00 | variable | variable
|==============================================================================================================================

'Input data (initial block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Size of health certificate encoded (big endian)                                   | 2
| Size of privacy salt (max 20)                                                     | 1
| User chosen privacy salt                                                          | variable
| Ethereum address to bind the receipt to                                           | 20
| Health certificate data                                                           | variable
|==============================================================================================================================

'Input data (next block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Health certificate data                                                           | variable
|==============================================================================================================================

'Output data (no error)'

The endorsement signature is computed over the previous data, using BOLOS endorsement API with key 1 as defined in https://ledger.readthedocs.io/en/latest/bolos/features.html#endorsement-application-attestation

The salted identity hash is a sha256 hash of gnt (standardized first name) || fnt (standardized last name) || user chosen privacy salt

The NFT ID is computed as a sh256 hash of the CBOR encoded payload of the health certificate 


[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Status : ok (0x01)                                                                | 1
| NFT ID                                                                            | 32
| Ethereum address to bind the token to                                             | 20
| Salted identity hash                                                              | 32
| Start date (timestamp, big endian encoded)                                        | 4
| Expirartion date (timestamp, big endian encoded)                                  | 4
| Application code hash                                                             | 32
| Endorsement signature                                                             | variable
|==============================================================================================================================

'Output data (error)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Status : error (0x00)                                                             | 1
| Error description                                                                 | variable
|==============================================================================================================================

### GET ENDORSEMENT DATA

#### Description

This command returns the specific endorsement data for this device.

This data is concatenated to the receipt sent by PARSE HEALTH CERTIFICATE when sending a request to a smart contract reusing it.

#### Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   04   |  00  |   00 | variable | variable
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Endorsement public key 1                                                          | 65
| Endorsement certificate                                                           | variable
|==============================================================================================================================


## Transport protocol

### General transport description

Ledger APDUs requests and responses are encapsulated using a flexible protocol allowing to fragment large payloads over different underlying transport mechanisms. 

The common transport header is defined as follows : 

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Communication channel ID (big endian)                                             | 2
| Command tag                                                                       | 1
| Packet sequence index (big endian)                                                | 2
| Payload                                                                           | var
|==============================================================================================================================

The Communication channel ID allows commands multiplexing over the same physical link. It is not used for the time being, and should be set to 0101 to avoid compatibility issues with implementations ignoring a leading 00 byte.

The Command tag describes the message content. Use TAG_APDU (0x05) for standard APDU payloads, or TAG_PING (0x02) for a simple link test.

The Packet sequence index describes the current sequence for fragmented payloads. The first fragment index is 0x00.

### APDU Command payload encoding

APDU Command payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU length (big endian)                                                          | 2
| APDU CLA                                                                          | 1
| APDU INS                                                                          | 1
| APDU P1                                                                           | 1
| APDU P2                                                                           | 1
| APDU length                                                                       | 1
| Optional APDU data                                                                | var
|==============================================================================================================================

APDU payload is encoded according to the APDU case 

[width="80%"]
|=======================================================================================
| Case Number  | *Lc* | *Le* | Case description
|   1          |  0   |  0   | No data in either direction - L is set to 00
|   2          |  0   |  !0  | Input Data present, no Output Data - L is set to Lc
|   3          |  !0  |  0   | Output Data present, no Input Data - L is set to Le
|   4          |  !0  |  !0  | Both Input and Output Data are present - L is set to Lc
|=======================================================================================

### APDU Response payload encoding

APDU Response payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU response length (big endian)                                                 | 2
| APDU response data and Status Word                                                | var
|==============================================================================================================================

### USB mapping

Messages are exchanged with the dongle over HID endpoints over interrupt transfers, with each chunk being 64 bytes long. The HID Report ID is ignored.

### BLE mapping

A similar encoding is used over BLE, without the Communication channel ID.

The application acts as a GATT server defining service UUID D973F2E0-B19E-11E2-9E96-0800200C9A66

When using this service, the client sends requests to the characteristic D973F2E2-B19E-11E2-9E96-0800200C9A66, and gets notified on the characteristic D973F2E1-B19E-11E2-9E96-0800200C9A66 after registering for it. 

Requests are encoded using the standard BLE 20 bytes MTU size

## Status Words 

The following standard Status Words are returned for all APDUs - some specific Status Words can be used for specific commands and are mentioned in the command description.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Canceled by user)
|   6A80   | Invalid data
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (Internal error, please report)
|   9000   | Normal ending of the command
|===============================================================================================
